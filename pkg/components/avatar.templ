package components

import (
	"fmt"
	"strings"
)

// AvatarSize represents the size of the avatar.
type AvatarSize string

const (
	AvatarSizeSmall  AvatarSize = "small"
	AvatarSizeMedium AvatarSize = "medium"
	AvatarSizeLarge  AvatarSize = "large"
)

// AvatarProps defines the properties for the Avatar component.
type AvatarProps struct {
	// ImageSrc is the URL of the avatar image.
	// If empty, initials will be used.
	ImageSrc string

	// Name is used to generate initials if ImageSrc is empty.
	Name string

	// Size determines the size of the avatar.
	// Default: AvatarSizeMedium
	Size AvatarSize

	// Class specifies additional CSS classes to apply to the avatar.
	Class string

	// Attributes allows passing additional HTML attributes to the avatar element.
	Attributes templ.Attributes
}

// getInitials generates initials from the given name.
func AvatarInitials(name string) string {
	parts := strings.Fields(name)
	initials := ""
	for i, part := range parts {
		if i > 1 {
			break
		}
		if len(part) > 0 {
			initials += string(part[0])
		}
	}
	return strings.ToUpper(initials)
}

// getSizeClasses returns the CSS classes for the given avatar size.
func AvatarSizeClasses(size AvatarSize) string {
	switch size {
	case AvatarSizeSmall:
		return "w-8 h-8 text-xs"
	case AvatarSizeLarge:
		return "w-16 h-16 text-xl"
	default:
		return "w-12 h-12 text-base"
	}
}

// Avatar renders an avatar component based on the provided props.
// It displays an image if ImageSrc is provided, otherwise it shows initials.
//
// Usage:
//
//	@components.Avatar(components.AvatarProps{
//	  ImageSrc: "https://example.com/avatar.jpg",
//	  Name: "John Doe",
//	  Size: components.AvatarSizeMedium,
//	  Class: "border-2 border-blue-500",
//	})
//
// Props:
//   - ImageSrc: The URL of the avatar image. Default: "" (empty string)
//   - Name: The name used to generate initials if ImageSrc is empty. Default: "" (empty string)
//   - Size: The size of the avatar (AvatarSizeSmall, AvatarSizeMedium, AvatarSizeLarge). Default: AvatarSizeMedium
//   - Class: Additional CSS classes to apply to the avatar. Default: "" (empty string)
//   - Attributes: Additional HTML attributes to apply to the avatar element. Default: nil
templ Avatar(props AvatarProps) {
	<div
		class={
			"inline-flex items-center justify-center rounded-full bg-muted",
			AvatarSizeClasses(props.Size),
			props.Class,
		}
		{ props.Attributes... }
	>
		if props.ImageSrc != "" {
			<img
				src={ props.ImageSrc }
				alt={ fmt.Sprintf("%s's avatar", props.Name) }
				class="w-full h-full object-cover rounded-full"
			/>
		} else {
			<span class="font-medium text-muted-foreground">
				{ AvatarInitials(props.Name) }
			</span>
		}
	</div>
}
