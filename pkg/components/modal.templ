package components

// ModalProps defines the properties for the Modal component.
type ModalProps struct {
	// ID is a unique identifier for the modal.
	// It's used to control opening and closing.
	// This should be unique across your application.
	ID string

	// Class specifies additional CSS classes to apply to the modal container.
	Class string
}

// Modal renders a modal dialog component.
// It uses Alpine.js for state management and animations.
//
// Usage:
//
// @components.ModalTrigger("default-modal") {
// 	@components.Button(components.ButtonProps{Text: "Open Modal"})
// }
//
// @components.Modal(components.ModalProps{ID: "default-modal", Class: "max-w-md"}) {
// 	@components.ModalHeader() {
// 		Are you absolutely sure?
// 	}
// 	@components.ModalBody() {
// 		This action cannot be undone. This will permanently delete your account and remove your data from our servers.
// 	}
// 	@components.ModalFooter() {
// 		<div class="flex gap-2">
// 			@components.ModalClose("default-modal") {
// 				@components.Button(components.ButtonProps{
// 					Text: "Cancel",
// 				})
// 			}
// 			@components.ModalClose("default-modal") {
// 				@components.Button(components.ButtonProps{
// 					Text:    "Continue",
// 					Variant: components.Secondary,
// 				})
// 			}
// 		</div>
// 	}
// }
//
// The Modal component should be used in conjunction with ModalTrigger to open it.
templ Modal(props ModalProps) {
	<div
		x-data="{ open: false }"
		x-on:open-modal.window="if ($event.detail.id === $el.dataset.modalId) open = true"
		x-on:close-modal.window="if ($event.detail.id === $el.dataset.modalId) open = false"
		data-modal-id={ props.ID }
		x-show="open"
		x-transition:enter="transition ease-out duration-300"
		x-transition:enter-start="opacity-0"
		x-transition:enter-end="opacity-100"
		x-transition:leave="transition ease-in duration-200"
		x-transition:leave-start="opacity-100"
		x-transition:leave-end="opacity-0"
		class="fixed inset-0 z-50 flex items-center justify-center overflow-y-auto"
		aria-labelledby="modal-title"
		role="dialog"
		aria-modal="true"
	>
		<div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity" aria-hidden="true"></div>
		<div
			class={
				"relative bg-background rounded-lg border text-left overflow-hidden shadow-xl transform transition-all sm:my-8 w-full",
				props.Class,
			}
			@click.away="open = false"
		>
			{ children... }
		</div>
	</div>
}

// ModalTrigger renders an element that opens the modal when clicked.
//
// Usage:
//
//	@components.ModalTrigger("example-modal") {
//	  @components.Button(components.ButtonProps{Text: "Open Modal"})
//	}
//
// The 'id' parameter should match the ID of the Modal you want to open.
templ ModalTrigger(id string) {
	<span
		data-modal-id={ id }
		@click="$dispatch('open-modal', { id: $el.dataset.modalId })"
	>
		{ children... }
	</span>
}

// ModalClose renders an element that closes the modal when clicked.
//
// Usage:
//
//	@components.ModalClose("example-modal") {
//	  @components.Button(components.ButtonProps{
//	    Text: "Close",
//	    Variant: components.Secondary,
//	  })
//	}
//
// The 'id' parameter should match the ID of the Modal you want to close.
templ ModalClose(id string) {
	<span
		data-modal-id={ id }
		@click="$dispatch('close-modal', { id: $el.dataset.modalId })"
	>
		{ children... }
	</span>
}

// ModalHeader renders the header section of the modal.
//
// Usage:
//
//	@components.ModalHeader() {
//	  Modal Title
//	  @components.ModalClose("example-modal")
//	}
templ ModalHeader() {
	<div class="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
		<h3 class="text-lg leading-6 font-medium text-foreground" id="modal-title">
			{ children... }
		</h3>
	</div>
}

// ModalBody renders the main content area of the modal.
//
// Usage:
//
//	@components.ModalBody() {
//	  <p>This is the modal content.</p>
//	}
templ ModalBody() {
	<div class="px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
		{ children... }
	</div>
}

// ModalFooter renders the footer section of the modal, typically containing action buttons.
//
// Usage:
//
//	@components.ModalFooter() {
//	  @components.ModalClose("example-modal") {
//	    @components.Button(components.ButtonProps{
//	      Text: "Close",
//	      Variant: components.Secondary,
//	    })
//	  }
//	}
templ ModalFooter() {
	<div class="px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
		{ children... }
	</div>
}
