package components

// CheckboxProps defines the properties for the Checkbox component.
type CheckboxProps struct {
	// ID is the unique identifier for the checkbox input.
	ID string

	// Name is the name attribute for the checkbox input.
	Name string

	// Value is the value attribute for the checkbox input.
	Value string

	// Label is the text label associated with the checkbox.
	// If empty, no label will be rendered.
	Label string

	// Checked can be either a bool or a string.
	// If bool, it directly controls the checked state.
	// If string, it's treated as a JavaScript expression for dynamic checking.
	Checked any

	// Disabled can be either a bool or a string.
	// If bool, it directly controls the disabled state.
	// If string, it's treated as a JavaScript expression for dynamic disabling.
	Disabled any

	// Class specifies additional CSS classes to apply to the checkbox input.
	Class string

	// Attributes allows passing additional HTML attributes to the checkbox input element.
	Attributes templ.Attributes
}

// Checkbox renders a checkbox input element with an optional label.
//
// Usage:
//
//	@components.Checkbox(components.CheckboxProps{
//	  ID:      "terms",
//	  Name:    "terms",
//	  Value:   "accepted",
//	  Label:   "I accept the terms and conditions",
//	  Checked: true,
//	})
//
// Props:
//   - ID: The unique identifier for the checkbox. Required.
//   - Name: The name attribute for the checkbox. Default: "" (empty string)
//   - Value: The value attribute for the checkbox. Default: "" (empty string)
//   - Label: The text label for the checkbox. If empty, no label is rendered.
//   - Checked: Controls the checked state. Can be bool or string. Default: nil
//   - Disabled: Controls the disabled state. Can be bool or string. Default: nil
//   - Class: Additional CSS classes for the checkbox input. Default: "" (empty string)
//   - Attributes: Additional HTML attributes for the checkbox input. Default: nil
templ Checkbox(props CheckboxProps) {
	<div class="flex items-center">
		<input
			type="checkbox"
			id={ props.ID }
			name={ props.Name }
			value={ props.Value }
			if props.Disabled != nil {
				if disabledBool, ok := props.Disabled.(bool); ok {
					disabled?={ disabledBool }
				}
				if disabledStr, ok := props.Disabled.(string); ok {
					:disabled={ disabledStr }
				}
			}
			if props.Checked != nil {
				if checkedBool, ok := props.Checked.(bool); ok {
					checked?={ checkedBool }
				}
				if checkedStr, ok := props.Checked.(string); ok {
					:checked={ checkedStr }
				}
			}
			class={ "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
                "data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
                props.Class }
			{ props.Attributes... }
		/>
		if props.Label != "" {
			<label
				for={ props.ID }
				class={ "ml-2 text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
                    templ.KV("text-muted-foreground", props.Disabled) }
			>
				{ props.Label }
			</label>
		}
	</div>
}
