package components

import (
	"fmt"
)

// RadioGroupProps defines the properties for the RadioGroup component.
type RadioGroupProps struct {
	// DefaultValue is the initial selected value for the radio group.
	DefaultValue string

	// Name is the name attribute for the radio group, used to group radio buttons.
	Name string

	// Required indicates whether the radio group is a required field.
	Required bool

	// Class specifies additional CSS classes to apply to the radio group container.
	Class string

	// Attributes allows passing additional HTML attributes to the radio group container.
	Attributes templ.Attributes
}

// RadioGroupItemProps defines the properties for the RadioGroupItem component.
type RadioGroupItemProps struct {
	// Value is the value attribute for the radio button.
	Value string

	// Name is the name attribute for the radio button, should match the RadioGroup's name.
	Name string

	// ID is the unique identifier for the radio button, used for labeling.
	ID string

	// Disabled is a string representing an Alpine.js expression for the disabled state.
	// It can be a boolean value ("true" or "false") or a more complex condition.
	// Examples:
	//   - "true" for always disabled
	//   - "false" for never disabled
	//   - "someVariable" to bind to an Alpine.js data property
	//   - "someCondition === true" for a dynamic condition
	Disabled string

	// Class specifies additional CSS classes to apply to the radio button container.
	Class string

	// Attributes allows passing additional HTML attributes to the radio button.
	Attributes templ.Attributes

	// Label is a templ.Component that represents the label for the radio button.
	// If not provided, the Value will be used as the label text.
	Label templ.Component
}

// RadioGroup renders a group of radio buttons.
// It uses Alpine.js for managing the selected state.
//
// Usage:
//
//	@components.RadioGroup(components.RadioGroupProps{
//	    DefaultValue: "option1",
//	    Name: "myRadioGroup",
//	    Required: true,
//	    Class: "my-custom-class",
//	}) {
//	    // RadioGroupItem components go here
//	}
templ RadioGroup(props RadioGroupProps) {
	<div
		role="radiogroup"
		aria-required={ fmt.Sprintf("%t", props.Required) }
		x-data={ fmt.Sprintf(`{ selectedValue: '%s' }`, props.DefaultValue) }
		class={ "space-y-2", props.Class }
		{ props.Attributes... }
	>
		{ children... }
	</div>
}

// RadioGroupItem renders a single radio button with an integrated label.
// It uses Alpine.js for managing the disabled state and selected value.
//
// Usage:
//
//	@components.RadioGroupItem(components.RadioGroupItemProps{
//	    Value: "option1",
//	    Name: "myRadioGroup",
//	    ID: "option1",
//	    Disabled: "someCondition === true",  // Alpine.js expression
//	    Label: templ.Raw("Option 1"),
//	})
templ RadioGroupItem(props RadioGroupItemProps) {
	<style>
		/* Custom styles for radio buttons */
		input[type="radio"] {
			position: relative;
		}
		input[type="radio"]:checked::before {
			content: '';
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);
			width: 8px;
			height: 8px;
			border-radius: 50%;
			background-color: hsl(var(--background));
		}
		input[type="radio"]:focus {
			outline: none;
			box-shadow: 0 0 0 2px hsl(var(--ring) / 50%);
		}
	</style>
	<div
		class={ "flex items-center space-x-2", props.Class }
		x-data={ fmt.Sprintf(`{ isDisabled: %s }`, props.Disabled) }
	>
		<input
			type="radio"
			id={ props.ID }
			name={ props.Name }
			value={ props.Value }
			:disabled="isDisabled"
			x-model="selectedValue"
			class={
				"h-4 w-4 translate-y-px appearance-none rounded-full border bg-background checked:border-primary checked:bg-primary",
				"disabled:opacity-50 disabled:cursor-not-allowed",
			}
			style="
				border-color: hsl(var(--input));
				transition: all 0.2s ease-in-out;
			"
			{ props.Attributes... }
		/>
		<label
			for={ props.ID }
			class={ "text-sm font-medium leading-none text-foreground" }
			:class="{ 'opacity-50 cursor-not-allowed': isDisabled }"
		>
			if props.Label != nil {
				@props.Label
			} else {
				{ props.Value }
			}
		</label>
	</div>
}
