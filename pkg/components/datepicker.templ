package components

// DatepickerProps defines the properties for the Datepicker component.
type DatepickerProps struct {
	// ID is the unique identifier for the datepicker input.
	ID string

	// Name is the name attribute for the datepicker input.
	Name string

	// Placeholder is the placeholder text for the datepicker input.
	Placeholder string

	// Format specifies the date format to use. Options: "M d, Y", "MM-DD-YYYY", "DD-MM-YYYY", "YYYY-MM-DD", "D d M, Y"
	// Default: "M d, Y"
	Format string

	// Class specifies additional CSS classes to apply to the datepicker container.
	Class string

	// Attributes allows passing additional HTML attributes to the datepicker input element.
	Attributes templ.Attributes
}

// Datepicker renders an enhanced datepicker component with an input field and a calendar view.
// It uses Alpine.js for interactivity and provides various formatting options and improved navigation.
// This version supports dark mode using Tailwind CSS variables.
//
// Usage:
//
//	@components.Datepicker(components.DatepickerProps{
//	  ID:          "my-datepicker",
//	  Name:        "selected-date",
//	  Placeholder: "Select a date",
//	  Format:      "YYYY-MM-DD",
//	  Class:       "w-full",
//	})
//
// Props:
//   - ID: The unique identifier for the datepicker input. Default: "" (empty string)
//   - Name: The name attribute for the datepicker input. Default: "" (empty string)
//   - Placeholder: The placeholder text for the datepicker input. Default: "" (empty string)
//   - Format: The date format to use. Default: "M d, Y"
//   - Class: Additional CSS classes to apply to the datepicker container. Default: "" (empty string)
//   - Attributes: Additional HTML attributes to apply to the datepicker input element. Default: nil
templ Datepicker(props DatepickerProps) {
	<div
		data-date-format={ props.Format }
		x-data="{
      datePickerOpen: false,
      datePickerValue: '',
      datePickerFormat: $el.getAttribute('data-date-format'),
      datePickerMonth: '',
      datePickerYear: '',
      datePickerDay: '',
      datePickerDaysInMonth: [],
      datePickerBlankDaysInMonth: [],
      datePickerMonthNames: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      datePickerDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      datePickerDayClicked(day) {
        let selectedDate = new Date(this.datePickerYear, this.datePickerMonth, day);
        this.datePickerDay = day;
        this.datePickerValue = this.datePickerFormatDate(selectedDate);
        this.datePickerIsSelectedDate(day);
        this.datePickerOpen = false;
      },
      datePickerPreviousMonth(){
        if (this.datePickerMonth == 0) { 
            this.datePickerYear--; 
            this.datePickerMonth = 11; 
        } else {
            this.datePickerMonth--;
        }
        this.datePickerCalculateDays();
      },
      datePickerNextMonth(){
        if (this.datePickerMonth == 11) { 
            this.datePickerMonth = 0; 
            this.datePickerYear++; 
        } else { 
            this.datePickerMonth++; 
        }
        this.datePickerCalculateDays();
      },
      datePickerIsSelectedDate(day) {
        const d = new Date(this.datePickerYear, this.datePickerMonth, day);
        return this.datePickerValue === this.datePickerFormatDate(d) ? true : false;
      },
      datePickerIsToday(day) {
        const today = new Date();
        const d = new Date(this.datePickerYear, this.datePickerMonth, day);
        return today.toDateString() === d.toDateString() ? true : false;
      },
      datePickerCalculateDays() {
        let daysInMonth = new Date(this.datePickerYear, this.datePickerMonth + 1, 0).getDate();
        let dayOfWeek = new Date(this.datePickerYear, this.datePickerMonth).getDay();
        let blankdaysArray = [];
        for (var i = 1; i <= dayOfWeek; i++) {
            blankdaysArray.push(i);
        }
        let daysArray = [];
        for (var i = 1; i <= daysInMonth; i++) {
            daysArray.push(i);
        }
        this.datePickerBlankDaysInMonth = blankdaysArray;
        this.datePickerDaysInMonth = daysArray;
      },
      datePickerFormatDate(date) {
        let formattedDay = this.datePickerDays[date.getDay()];
        let formattedDate = ('0' + date.getDate()).slice(-2);
        let formattedMonth = this.datePickerMonthNames[date.getMonth()];
        let formattedMonthShortName = this.datePickerMonthNames[date.getMonth()].substring(0, 3);
        let formattedMonthInNumber = ('0' + (parseInt(date.getMonth()) + 1)).slice(-2);
        let formattedYear = date.getFullYear();

        if (this.datePickerFormat === 'M d, Y') {
          return `${formattedMonthShortName} ${formattedDate}, ${formattedYear}`;
        }
        if (this.datePickerFormat === 'MM-DD-YYYY') {
          return `${formattedMonthInNumber}-${formattedDate}-${formattedYear}`;
        }
        if (this.datePickerFormat === 'DD-MM-YYYY') {
          return `${formattedDate}-${formattedMonthInNumber}-${formattedYear}`;
        }
        if (this.datePickerFormat === 'YYYY-MM-DD') {
          return `${formattedYear}-${formattedMonthInNumber}-${formattedDate}`;
        }
        if (this.datePickerFormat === 'D d M, Y') {
          return `${formattedDay} ${formattedDate} ${formattedMonthShortName} ${formattedYear}`;
        }
        
        return `${formattedMonth} ${formattedDate}, ${formattedYear}`;
      },
    }"
		x-init="
        currentDate = new Date();
        datePickerMonth = currentDate.getMonth();
        datePickerYear = currentDate.getFullYear();
        datePickerDay = currentDate.getDate();
        datePickerValue = datePickerFormatDate(currentDate);
        datePickerCalculateDays();
    "
		class={ "relative", props.Class }
		x-cloak
	>
		<div class="relative">
			<input
				type="text"
				id={ props.ID }
				name={ props.Name }
				placeholder={ props.Placeholder }
				x-model="datePickerValue"
				@click="datePickerOpen = !datePickerOpen"
				x-on:keydown.escape="datePickerOpen = false"
				class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
				readonly
				{ props.Attributes... }
			/>
			<div
				@click="datePickerOpen = !datePickerOpen"
				class="absolute top-0 right-0 px-3 py-2 cursor-pointer text-muted-foreground hover:text-foreground"
			>
				@Icon(IconProps{Name: "calendar"})
			</div>
		</div>
		<div
			x-show="datePickerOpen"
			x-transition
			@click.away="datePickerOpen = false"
			class="absolute top-0 left-0 max-w-lg p-4 mt-12 antialiased bg-popover text-popover-foreground border rounded-lg shadow w-[17rem] border-border"
		>
			<div class="flex items-center justify-between mb-2">
				<div>
					<span x-text="datePickerMonthNames[datePickerMonth]" class="text-lg font-bold"></span>
					<span x-text="datePickerYear" class="ml-1 text-lg font-normal text-muted-foreground"></span>
				</div>
				<div>
					<button @click="datePickerPreviousMonth()" type="button" class="inline-flex p-1 transition duration-100 ease-in-out rounded-full cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 hover:bg-accent hover:text-accent-foreground">
						@Icon(IconProps{Name: "chevron-left", Size: "16", Class: "text-muted-foreground"})
					</button>
					<button @click="datePickerNextMonth()" type="button" class="inline-flex p-1 transition duration-100 ease-in-out rounded-full cursor-pointer focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 hover:bg-accent hover:text-accent-foreground">
						@Icon(IconProps{Name: "chevron-right", Size: "16", Class: "text-muted-foreground"})
					</button>
				</div>
			</div>
			<div class="grid grid-cols-7 mb-3">
				<template x-for="(day, index) in datePickerDays" :key="index">
					<div class="px-0.5">
						<div x-text="day" class="text-xs font-medium text-center text-muted-foreground"></div>
					</div>
				</template>
			</div>
			<div class="grid grid-cols-7">
				<template x-for="blankDay in datePickerBlankDaysInMonth">
					<div class="p-1 text-sm text-center border border-transparent"></div>
				</template>
				<template x-for="(day, dayIndex) in datePickerDaysInMonth" :key="dayIndex">
					<div class="px-0.5 mb-1 aspect-square">
						<div
							x-text="day"
							@click="datePickerDayClicked(day)"
							:class="{
                'bg-muted text-muted-foreground': datePickerIsToday(day) == true, 
                'text-foreground hover:bg-accent hover:text-accent-foreground': datePickerIsToday(day) == false && datePickerIsSelectedDate(day) == false,
                'bg-primary text-primary-foreground hover:bg-primary/90': datePickerIsSelectedDate(day) == true
              }"
							class="flex items-center justify-center text-sm leading-none text-center rounded-full cursor-pointer h-7 w-7"
						></div>
					</div>
				</template>
			</div>
		</div>
	</div>
}
