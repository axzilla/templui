package pages

import (
	"github.com/axzilla/templui/internal/ui/layouts"
	"github.com/axzilla/templui/internal/ui/modules"
)

var installGo = `go version`

var installTempl = `go install github.com/a-h/templ/cmd/templ@latest`

var tailwindHomebrew = `brew install tailwindcss`

var tailwindMacOSArm64 = `curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-arm64
chmod +x tailwindcss-macos-arm64
sudo mv tailwindcss-macos-arm64 /usr/local/bin/tailwindcss`

var tailwindMacOSX64 = `curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-x64
chmod +x tailwindcss-macos-x64
sudo mv tailwindcss-macos-x64 /usr/local/bin/tailwindcss`

var tailwindLinuxX64 = `curl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64
chmod +x tailwindcss-linux-x64
sudo mv tailwindcss-linux-x64 /usr/local/bin/tailwindcss`

var tailwindWindowsX64 = `# On Windows (x64i
# Download from: https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-windows-x64.exe
# Add to your PATH as 'tailwindcss'`

var makeFile = `# Run templ generation in watch mode
templ:
    templ generate --watch --proxy="http://localhost:8090" --open-browser=false

# Run air for Go hot reload
server:
    air \
    --build.cmd "go build -o tmp/bin/main ./main.go" \
    --build.bin "tmp/bin/main" \
    --build.delay "100" \
    --build.exclude_dir "node_modules" \
    --build.include_ext "go" \
    --build.stop_on_error "false" \
    --misc.clean_on_exit true

# Watch Tailwind CSS changes
tailwind:
    tailwindcss -i ./assets/css/input.css -o ./assets/css/output.css --watch

# Start development server with all watchers
dev:
    make -j3 tailwind templ server`

var inputCss = `@import 'tailwindcss';

@custom-variant dark (&:where(.dark, .dark *));

@theme inline {
  --color-border: var(--border);
  --color-input: var(--input);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-ring: var(--ring);

  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);

  --container-2xl: 1400px;
}

:root {
  --background: hsl(0 0% 100%);
  --foreground: hsl(240 10% 3.9%);
  --muted: hsl(240 4.8% 95.9%);
  --muted-foreground: hsl(240 3.8% 46.1%);
  --popover: hsl(0 0% 100%);
  --popover-foreground: hsl(240 10% 3.9%);
  --card: hsl(0 0% 100%);
  --card-foreground: hsl(240 10% 3.9%);
  --border: hsl(240 5.9% 90%);
  --input: hsl(240 5.9% 90%);
  --primary: hsl(240 5.9% 10%);
  --primary-foreground: hsl(0 0% 98%);
  --secondary: hsl(240 4.8% 95.9%);
  --secondary-foreground: hsl(240 5.9% 10%);
  --accent: hsl(240 4.8% 95.9%);
  --accent-foreground: hsl(240 5.9% 10%);
  --destructive: hsl(0 84.2% 60.2%);
  --destructive-foreground: hsl(0 0% 98%);
  --ring: hsl(240 5.9% 10%);
  --radius: 0.5rem;
}

.dark {
  --background: hsl(240 10% 3.9%);
  --foreground: hsl(0 0% 98%);
  --muted: hsl(240 3.7% 15.9%);
  --muted-foreground: hsl(240 5% 64.9%);
  --popover: hsl(240 10% 3.9%);
  --popover-foreground: hsl(0 0% 98%);
  --card: hsl(240 10% 3.9%);
  --card-foreground: hsl(0 0% 98%);
  --border: hsl(240 3.7% 15.9%);
  --input: hsl(240 3.7% 15.9%);
  --primary: hsl(0 0% 98%);
  --primary-foreground: hsl(240 5.9% 10%);
  --secondary: hsl(240 3.7% 15.9%);
  --secondary-foreground: hsl(0 0% 98%);
  --accent: hsl(240 3.7% 15.9%);
  --accent-foreground: hsl(0 0% 98%);
  --destructive: hsl(0 62.8% 30.6%);
  --destructive-foreground: hsl(0 0% 98%);
  --ring: hsl(240 4.9% 83.9%);
  --radius: 0.5rem;
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings:
      "rlig" 1,
      "calt" 1;
  }
}`

var installAir = `go install github.com/air-verse/air@latest`

var devCommand = `make dev`

var htmxIntegration = `<script>
  // Re-initialize templUI components after HTMX swaps
  document.body.addEventListener("htmx:afterSwap", (e) => {
    if (window.templUI) {
      Object.values(window.templUI).forEach(comp => {
        comp.init?.(e.detail.elt);
      });
    }
  });

  // Re-initialize components after out-of-band swaps
  document.body.addEventListener("htmx:oobAfterSwap", (e) => {
    if (window.templUI) {
      Object.values(window.templUI).forEach(comp => {
        comp.init?.(e.detail.target);
      });
    }
  });

  // Cleanup before swap (for components with event listeners)
  document.body.addEventListener("htmx:beforeSwap", (e) => {
    if (window.templUI) {
      Object.values(window.templUI).forEach(comp => {
        comp.cleanup?.(e.detail.target);
      });
    }
  });
</script>`

var datastarIntegration = `<!-- Event-based approach -->
<body data-on-datastar-sse="initComponents(evt)">
  <!-- ... -->
</body>

<script>
  window.initComponents = function(evt) {
    // Cleanup before new content is loaded
    if (evt.detail?.type === 'started') {
        if (window.templUI) {
          Object.values(window.templUI).forEach(comp => {
            comp.cleanup?.(document);
          });
        }
    }

    // Re-initialize components after finished event
    if (evt.detail?.type === 'finished') {
      // setTimeout is required because Datastar's 'finished' event 
      // fires before DOM updates are complete
      setTimeout(() => {
        if (window.templUI) {
          Object.values(window.templUI).forEach(comp => {
            comp.init?.();
          });
        }
      }, 100);
    }
  }
</script>`

var manualIntegration = `// Initialize all components in a specific container
const container = document.getElementById('dynamic-content');
if (window.templUI) {
  Object.values(window.templUI).forEach(comp => {
    comp.init?.(container);
  });
}

// Initialize a specific component type
if (window.templUI?.modal) {
  window.templUI.modal.init(container);
}

// Simple universal approach for any dynamic content
function initTemplUIComponents(element = document) {
  if (window.templUI) {
    Object.values(window.templUI).forEach(comp => {
      comp.init?.(element);
    });
  }
}

// Call after adding dynamic content
setTimeout(() => initTemplUIComponents(), 100);`

var configurationFile = `{
  "componentsDir": "components",
  "utilsDir": "utils", 
  "moduleName": "your-app/module",
  "jsDir": "assets/js",
  "jsPublicPath": "/assets/js"
}`

var standardSetup = `// Go server setup
mux.Handle("/assets/", http.StripPrefix("/assets/", http.FileServer(http.Dir("./assets"))))

// .templui.json
{
  "jsDir": "assets/js",
  "jsPublicPath": "/assets/js"  // or omit for automatic fallback
}`

var urlPrefixSetup = `// Go server setup  
appGroup := mux.PathPrefix("/app").Subrouter()
appGroup.Handle("/static/", http.StripPrefix("/app/static/", http.FileServer(http.Dir("./assets"))))

// .templui.json
{
  "jsDir": "assets/js",
  "jsPublicPath": "/app/static/js"
}`

var customAssetSetup = `// Go server setup
mux.Handle("/public/", http.StripPrefix("/public/", http.FileServer(http.Dir("./build"))))

// .templui.json  
{
  "jsDir": "build/js",
  "jsPublicPath": "/public/js"
}`

templ HowToUse() {
	@layouts.DocsLayout(
		"How To Use",
		"Learn how to integrate templUI into your projects using the CLI.",
		[]modules.TableOfContentsItem{
			{ID: "requirements", Text: "Requirements"},
			{ID: "base-configuration", Text: "Base Configuration"},
			{
				ID:   "development-tools",
				Text: "Development Tools",
				Children: []modules.TableOfContentsItem{
					{ID: "air-live-reload", Text: "Air (Live Reload)"},
					{ID: "development-makefile", Text: "Development Makefile"},
					{ID: "start-dev-server", Text: "Start Development Server"},
				},
			},
			{
				ID:   "installation",
				Text: "Installation (CLI)",
				Children: []modules.TableOfContentsItem{
					{ID: "install-cli", Text: "Install CLI"},
					{ID: "initialize-project", Text: "Initialize Project"},
					{ID: "add-components", Text: "Add Components"},
					{ID: "list-components", Text: "List Components"},
					{ID: "copy-paste", Text: "Copy & Paste"},
					{ID: "quickstart-template", Text: "Quickstart Template"},
				},
			},
			{
				ID:   "framework-integration",
				Text: "Framework Integration",
				Children: []modules.TableOfContentsItem{
					{ID: "htmx-integration", Text: "HTMX Integration"},
					{ID: "datastar-integration", Text: "Datastar Integration"},
					{ID: "manual-initialization", Text: "Manual Initialization"},
				},
			},
			{
				ID:   "advanced-configuration",
				Text: "Advanced Configuration",
				Children: []modules.TableOfContentsItem{
					{ID: "configuration-file", Text: "Configuration File"},
					{ID: "js-asset-routing", Text: "JavaScript Asset Routing"},
					{ID: "external-docs", Text: "External Documentation"},
				},
			},
		},
	) {
		@modules.PageWrapper(modules.PageWrapperProps{
			Name:        "How To Use",
			HideSource:  true,
			Description: templ.Raw("Learn how to integrate templUI into your projects using the official CLI."),
			Breadcrumbs: modules.Breadcrumbs{
				Items: []modules.BreadcrumbItem{
					{
						Text: "Docs",
						Path: "/docs",
					},
					{
						Text: "How To Use",
						Path: "/docs/how-to-use",
					},
				},
			},
		}) {
			@modules.ContainerWrapper(modules.ContainerWrapperProps{
				Title: "Requirements",
				ID:    "requirements",
			}) {
				<section class="mb-12">
					<p class="mb-4 text-muted-foreground">Before using templUI, ensure you have these tools installed:</p>
					<div class="space-y-6">
						<div>
							<h3 class="text-xl font-semibold mb-2">1. <a href="https://golang.org" class="text-primary/90 underline" target="_blank">Go</a> (1.24 or later)</h3>
							<p class="text-muted-foreground mb-2">Check your Go version:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    installGo,
							})
							<p class="text-sm mt-2 text-muted-foreground">For installation instructions, visit <a href="https://golang.org/dl" class="text-primary/90 underline" target="_blank">golang.org/dl</a>.</p>
						</div>
						<div>
							<h3 class="text-xl font-semibold mb-2">2. <a href="https://templ.guide" class="text-primary/90 underline" target="_blank">templ</a> (v0.3.898 or later)</h3>
							<p class="mb-2 text-muted-foreground">Install the templ CLI:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    installTempl,
							})
						</div>
						<div>
							<h3 class="text-xl font-semibold mb-2">3. <a href="https://tailwindcss.com" class="text-primary/90 underline" target="_blank">Tailwind CSS</a> Standalone CLI (v4.0.5 or later)</h3>
							<p class="mb-2 text-muted-foreground">Install the standalone CLI based on your operating system:</p>
							<div class="space-y-4">
								<p class="mb-2 text-muted-foreground">Homebrew (macOS):</p>
								@modules.Code(modules.CodeProps{
									Language:       "shell",
									ShowCopyButton: true,
									CodeContent:    tailwindHomebrew,
								})
								<p class="mb-2 text-muted-foreground">macOS (Apple Silicon):</p>
								@modules.Code(modules.CodeProps{
									Language:       "shell",
									ShowCopyButton: true,
									CodeContent:    tailwindMacOSArm64,
								})
								<p class="mb-2 text-muted-foreground">macOS (Intel):</p>
								@modules.Code(modules.CodeProps{
									Language:       "shell",
									ShowCopyButton: true,
									CodeContent:    tailwindMacOSX64,
								})
								<p class="mb-2 text-muted-foreground">Linux (x64):</p>
								@modules.Code(modules.CodeProps{
									Language:       "shell",
									ShowCopyButton: true,
									CodeContent:    tailwindLinuxX64,
								})
								<p class="mb-2 text-muted-foreground">Windows (x64):</p>
								@modules.Code(modules.CodeProps{
									Language:       "shell",
									ShowCopyButton: true,
									CodeContent:    tailwindWindowsX64,
								})
							</div>
						</div>
					</div>
				</section>
			}
			@modules.ContainerWrapper(modules.ContainerWrapperProps{
				Title: "Base Configuration",
				ID:    "base-configuration",
			}) {
				<section class="mb-12">
					<p class="mb-4 text-muted-foreground">templUI provides pre-configured styles and themes. You will need these files in your project:</p>
					<div class="space-y-6">
						<div>
							<h3 class="text-xl font-semibold mb-2">1. CSS Configuration file + Base Styles</h3>
							<p class="mb-2 text-muted-foreground">Create assets/css/input.css with our base styles:</p>
							@modules.Code(modules.CodeProps{
								Language:       "css",
								ShowCopyButton: true,
								CodeContent:    inputCss,
							})
							<p class="text-sm mt-2">For custom themes and additional styles, check our <a href="/docs/themes" class="text-primary underline">themes documentation</a>.</p>
						</div>
					</div>
				</section>
			}
			@modules.ContainerWrapper(modules.ContainerWrapperProps{
				Title: "Development Tools",
				ID:    "development-tools",
			}) {
				<section class="mb-12">
					<div class="bg-muted p-4 rounded-lg mb-6">
						<p class="mb-2 text-muted-foreground">
							Here is our recommended development setup for Go and templ projects, adapted from official documentation and community best practices:
						</p>
						<ul class="list-disc pl-6 space-y-1 text-muted-foreground">
							<li>Hot reloading for Go, Templ, and Tailwind</li>
							<li>Convenient development commands via Make</li>
							<li>Automated file watching and rebuilding</li>
						</ul>
						<p class="mt-2 text-sm text-muted-foreground">
							The Makefile configuration is based on the <a href="https://templ.guide" class="text-primary underline" target="_blank">templ documentation</a> and adapted for our use case.
							While there are many ways to set up your development environment, this configuration provides a solid starting point.
						</p>
					</div>
					<div class="space-y-6">
						<div id="air-live-reload">
							<h3 class="text-xl font-semibold mb-2">1. Air (Live Reload for Go)</h3>
							<p class="mb-2 text-muted-foreground">Install Air for automatic Go server rebuilds:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    installAir,
							})
						</div>
						<div id="development-makefile">
							<h3 class="text-xl font-semibold mb-2">2. Development Makefile</h3>
							<p class="mb-2 text-muted-foreground">Create a Makefile in your project root:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    makeFile,
							})
							<div class="bg-muted p-4 rounded-lg mt-4">
								<p class="font-medium mb-2 text-muted-foreground">Note about ports:</p>
								<ul class="list-disc pl-6 space-y-1 text-sm text-muted-foreground">
									<li>In this example configuration, the Go application runs on port 8090</li>
									<li>templs development server will be available at http://localhost:7331</li>
									<li>Adjust the --proxy flag in the templ command if your app uses a different port</li>
								</ul>
							</div>
						</div>
						<div id="start-dev-server">
							<h3 class="text-xl font-semibold mb-2">3. Start Development Server</h3>
							<p class="mb-2 text-muted-foreground">Start all development tools with a single command:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    devCommand,
							})
							<p class="text-sm mt-2 text-muted-foreground">This will:</p>
							<ul class="list-disc pl-6 text-sm space-y-1 text-muted-foreground">
								<li>Watch and compile templ files</li>
								<li>Start the Go server with hot reload via Air</li>
								<li>Watch and compile Tailwind CSS changes</li>
							</ul>
							<p class="text-sm mt-2 text-muted-foreground">Or run services individually:</p>
							<ul class="list-disc pl-6 text-sm space-y-1 text-muted-foreground">
								<li>{ `make templ` } - Watch templ files only</li>
								<li>{ `make server` } - Run Go server only</li>
								<li>{ `make tailwind` } - Watch Tailwind CSS only</li>
							</ul>
						</div>
					</div>
				</section>
			}
			@modules.ContainerWrapper(modules.ContainerWrapperProps{
				Title: "Installation (CLI)",
				ID:    "installation",
			}) {
				<section class="mb-12">
					<p class="mb-4 text-muted-foreground">The recommended way to use templUI components is via the official CLI tool.</p>
					<div class="space-y-8">
						<div id="install-cli">
							<h3 class="text-xl font-semibold mb-2">1. Install the templUI CLI</h3>
							<p class="mb-2 text-muted-foreground">Install the latest version using `go install`:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "go install github.com/axzilla/templui/cmd/templui@latest",
							})
							<br/>
							<p class="mb-2 text-muted-foreground">Verify the installation:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui -v",
							})
						</div>
						<div id="initialize-project">
							<h3 class="text-xl font-semibold mb-2">2. Initialize templUI in Your Project</h3>
							<p class="mb-2 text-muted-foreground">Navigate to your projects root directory and run:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui init",
							})
							<p class="text-sm mt-2 mb-4 text-muted-foreground">You will be prompted to set directories for components and utils, your Go module name, a directory for JavaScript files, and optionally a public path for serving JS files.</p>
							<p class="mb-2 text-muted-foreground">You can specify a specific version (tag, branch, commit):</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui init@v0.1.0 # Example: Initialize using version v0.1.0",
							})
						</div>
						<div id="add-components">
							<h3 class="text-xl font-semibold mb-2">3. Add Components</h3>
							<p class="mb-2 text-muted-foreground">Use the `add` command to install specific components and their dependencies into your configured directories.</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui add button card",
							})
							<br/>
							<p class="mb-2 text-muted-foreground">To install all available components:</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui add *",
							})
							<br/>
							<p class="mb-2 text-muted-foreground">To install components from a specific version (tag, branch, commit):</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui add@main button # Install button from the main branch",
							})
							<p class="text-sm mt-2 mb-4 text-muted-foreground">The CLI automatically handles dependencies defined in the manifest and adjusts import paths within the copied `.templ` files to match your projects module path.</p>
							<div class="bg-muted p-4 rounded-lg mt-4 mb-4">
								<h4 class="font-semibold mb-2">📝 JavaScript Components</h4>
								<p class="text-muted-foreground mb-2">For components that require JavaScript (like modals, dropdowns, etc.), the CLI automatically:</p>
								<ul class="list-disc pl-6 space-y-1 text-muted-foreground mb-2">
									<li>Downloads the components JavaScript file</li>
									<li>Adds a <code class="bg-background px-1 rounded">Script()</code> template to the component</li>
								</ul>
								<p class="text-muted-foreground mb-2">You must include the Script() template in your layout:</p>
								@modules.Code(modules.CodeProps{
									Language:       "templ",
									ShowCopyButton: true,
									CodeContent:    "@modal.Script()  // Include in your base layout",
								})
								<p class="text-sm mt-2 text-muted-foreground">Each component manages its own JavaScript - no global bundle needed!</p>
							</div>
						</div>
						<div id="list-components">
							<h3 class="text-xl font-semibold mb-2">4. List Available Components</h3>
							<p class="mb-2 text-muted-foreground">To see a list of all components and utils available in the manifest (for the default or a specific version):</p>
							@modules.Code(modules.CodeProps{
								Language:       "shell",
								ShowCopyButton: true,
								CodeContent:    "templui list\ntemplui list@v0.1.0", // Keep newline for display
							})
						</div>
						<div id="copy-paste">
							<h3 class="text-xl font-semibold mb-2">Copy & Paste</h3>
							<p class="mb-4 text-muted-foreground">
								Alternatively, instead of using our CLI, you can copy any component directly from the docs or the GitHub repository and paste it into your project. Just make sure to manually include any required dependencies and adjust import paths accordingly.
							</p>
						</div>
						<div id="quickstart-template">
							<h3 class="text-xl font-semibold mb-2">Quickstart Template</h3>
							<p class="mb-4 text-muted-foreground">
								For a completely new project with everything pre-configured, use our <a href="https://github.com/axzilla/templui-quickstart" class="text-primary underline" target="_blank">templUI Quickstart</a> template.
							</p>
						</div>
					</div>
				</section>
			}
			@modules.ContainerWrapper(modules.ContainerWrapperProps{
				Title: "Framework Integration",
				ID:    "framework-integration",
			}) {
				<section class="mb-12">
					<p class="mb-6 text-muted-foreground">
						templUI is framework-agnostic and works with any JavaScript framework or library. Components need to be re-initialized after dynamic content changes.
					</p>
					<div class="space-y-8">
						<div id="htmx-integration">
							<h3 class="text-xl font-semibold mb-2">HTMX Integration</h3>
							<p class="mb-4 text-muted-foreground">
								For HTMX-powered applications, add this script to initialize components after content swaps:
							</p>
							@modules.Code(modules.CodeProps{
								Language:       "html",
								ShowCopyButton: true,
								CodeContent:    htmxIntegration,
							})
						</div>
						<div id="datastar-integration">
							<h3 class="text-xl font-semibold mb-2">Datastar Integration</h3>
							<p class="mb-4 text-muted-foreground">
								For Datastar applications, use SSE events to re-initialize components:
							</p>
							@modules.Code(modules.CodeProps{
								Language:       "html",
								ShowCopyButton: true,
								CodeContent:    datastarIntegration,
							})
						</div>
						<div id="manual-initialization">
							<h3 class="text-xl font-semibold mb-2">Manual Initialization</h3>
							<p class="mb-4 text-muted-foreground">
								You can also manually initialize components for specific elements or use a simple approach for any dynamic content:
							</p>
							@modules.Code(modules.CodeProps{
								Language:       "javascript",
								ShowCopyButton: true,
								CodeContent:    manualIntegration,
							})
						</div>
					</div>
				</section>
			}
			@modules.ContainerWrapper(modules.ContainerWrapperProps{
				Title: "Advanced Configuration",
				ID:    "advanced-configuration",
			}) {
				<section class="mb-12">
					<div class="space-y-8">
						<div id="configuration-file">
							<h3 class="text-xl font-semibold mb-2">Configuration File (.templui.json)</h3>
							<p class="mb-4 text-muted-foreground">
								After running <code class="bg-muted px-1 rounded">templui init</code>, a configuration file is created in your project root. Here is what each field does:
							</p>
							@modules.Code(modules.CodeProps{
								Language:       "json",
								ShowCopyButton: true,
								CodeContent:    configurationFile,
							})
							<div class="mt-4 space-y-3">
								<div class="border border-border rounded-lg p-4">
									<h4 class="font-semibold mb-2"><code class="bg-muted px-1 rounded">componentsDir</code></h4>
									<p class="text-sm text-muted-foreground">Directory where templ components will be installed (relative to project root)</p>
								</div>
								<div class="border border-border rounded-lg p-4">
									<h4 class="font-semibold mb-2"><code class="bg-muted px-1 rounded">utilsDir</code></h4>
									<p class="text-sm text-muted-foreground">Directory where utility Go files will be installed</p>
								</div>
								<div class="border border-border rounded-lg p-4">
									<h4 class="font-semibold mb-2"><code class="bg-muted px-1 rounded">moduleName</code></h4>
									<p class="text-sm text-muted-foreground">Your Go module name (used for import path adjustment)</p>
								</div>
								<div class="border border-border rounded-lg p-4">
									<h4 class="font-semibold mb-2"><code class="bg-muted px-1 rounded">jsDir</code></h4>
									<p class="text-sm text-muted-foreground">Directory where JavaScript files are saved on disk</p>
								</div>
								<div class="border border-border rounded-lg p-4">
									<h4 class="font-semibold mb-2"><code class="bg-muted px-1 rounded">jsPublicPath</code> <span class="text-xs bg-secondary px-2 py-1 rounded">optional</span></h4>
									<p class="text-sm text-muted-foreground mb-2">Public URL path where JavaScript files are served by your web server</p>
									<div class="bg-muted/50 p-3 rounded text-xs">
										<p class="mb-2 font-medium">Examples:</p>
										<ul class="space-y-1">
											<li><code>"/assets/js"</code> → files served at yoursite.com/assets/js/</li>
											<li><code>"/app/static/js"</code> → files served at yoursite.com/app/static/js/</li>
											<li><code>"/static"</code> → files served at yoursite.com/static/</li>
										</ul>
										<p class="mt-2 text-muted-foreground">If not set, defaults to <code>"/" + jsDir</code></p>
									</div>
								</div>
							</div>
						</div>
						<div id="js-asset-routing">
							<h3 class="text-xl font-semibold mb-2">JavaScript Asset Routing Examples</h3>
							<p class="mb-4 text-muted-foreground">
								The <code class="bg-muted px-1 rounded">jsPublicPath</code> setting is useful when your web server configuration does not directly map filesystem paths to URL paths.
							</p>
							<div class="space-y-6">
								<div>
									<h4 class="font-semibold mb-2">Standard Setup (Default)</h4>
									<p class="text-sm text-muted-foreground mb-2">Files stored in <code class="bg-muted px-1 rounded">assets/js/</code> served at <code class="bg-muted px-1 rounded">/assets/js/</code></p>
									@modules.Code(modules.CodeProps{
										Language:       "go",
										ShowCopyButton: true,
										CodeContent:    standardSetup,
									})
								</div>
								<div>
									<h4 class="font-semibold mb-2">App with URL Prefix</h4>
									<p class="text-sm text-muted-foreground mb-2">App running under <code class="bg-muted px-1 rounded">/app/</code> prefix</p>
									@modules.Code(modules.CodeProps{
										Language:       "go",
										ShowCopyButton: true,
										CodeContent:    urlPrefixSetup,
									})
								</div>
								<div>
									<h4 class="font-semibold mb-2">Custom Asset Directory</h4>
									<p class="text-sm text-muted-foreground mb-2">Assets served from a different path than filesystem location</p>
									@modules.Code(modules.CodeProps{
										Language:       "go",
										ShowCopyButton: true,
										CodeContent:    customAssetSetup,
									})
								</div>
							</div>
						</div>
						<div id="external-docs">
							<h3 class="text-xl font-semibold mb-2">External Documentation</h3>
							<p class="mb-4 text-muted-foreground">
								For advanced configuration and best practices, refer to the official documentation:
							</p>
							<ul class="list-disc pl-6 space-y-2 text-muted-foreground">
								<li><a href="https://templ.guide" class="text-primary underline" target="_blank">templ</a> - Cache configuration, component patterns, etc.</li>
								<li><a href="https://tailwindcss.com/docs" class="text-primary underline" target="_blank">Tailwind CSS</a> - Custom theming, plugins, optimization</li>
							</ul>
						</div>
					</div>
				</section>
			}
		}
	}
}
