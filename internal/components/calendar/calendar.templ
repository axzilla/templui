package calendar

import (
	"github.com/axzilla/templui/internal/components/icon"
	"github.com/axzilla/templui/internal/utils"
	"strconv"
	"time"
)

type LocaleTag string

var (
	LocaleDefaultTag    = LocaleTag("en-US")
	LocaleTagChinese    = LocaleTag("zh-CN")
	LocaleTagFrench     = LocaleTag("fr-FR")
	LocaleTagGerman     = LocaleTag("de-DE")
	LocaleTagItalian    = LocaleTag("it-IT")
	LocaleTagJapanese   = LocaleTag("ja-JP")
	LocaleTagPortuguese = LocaleTag("pt-PT")
	LocaleTagSpanish    = LocaleTag("es-ES")
	LocaleTagTurkish    = LocaleTag("tr-TR")
)

type Props struct {
	ID           string
	Class        string
	LocaleTag    LocaleTag
	Value        *time.Time
	Name         string
	InitialMonth int  // Optional: 0-11 (Default: current or from Value). Controls the initially displayed month view.
	InitialYear  int  // Optional: (Default: current or from Value). Controls the initially displayed year view.
	WithTime     bool // Show time input row if true
	WithSeconds  bool // Show seconds field if true
	With24Hours  bool // Use 24-hour format if true, otherwise 12-hour
}

templ Calendar(props ...Props) {
	{{
	var p Props
	if len(props) > 0 {
		p = props[0]
	}
	if p.ID == "" {
		p.ID = utils.RandomID() + "-calendar"
	}
	if p.Name == "" {
		// Should be provided by parent (e.g., DatePicker or in standalone usage)
		p.Name = p.ID + "-value" // Fallback name
	}
	if p.LocaleTag == "" {
		p.LocaleTag = LocaleDefaultTag
	}

	initialView := time.Now()
	if p.Value != nil && !p.Value.IsZero() {
		initialView = *p.Value
	}

	initialMonth := p.InitialMonth
	initialYear := p.InitialYear

	// Use year from initialView if InitialYear prop is invalid/unset (<= 0)
	if initialYear <= 0 {
		initialYear = initialView.Year()
	}

	// Use month from initialView if InitialMonth prop is invalid OR
	// if InitialMonth is default 0 AND InitialYear was also defaulted (meaning neither was likely set explicitly)
	if (initialMonth < 0 || initialMonth > 11) || (initialMonth == 0 && p.InitialYear <= 0) {
		initialMonth = int(initialView.Month()) - 1 // time.Month is 1-12
	}

	initialSelectedISO := ""
	if p.Value != nil && !p.Value.IsZero() {
		if p.WithTime {
			initialSelectedISO = p.Value.Format("2006-01-02T15:04:05Z")
		} else {
			initialSelectedISO = p.Value.Format("2006-01-02")
		}
	}
	}}
	<div class={ p.Class } id={ p.ID + "-wrapper" } data-calendar-wrapper="true">
		<input
			type="hidden"
			name={ p.Name }
			value={ initialSelectedISO }
			id={ p.ID + "-hidden" }
			data-calendar-hidden-input
		/>
		<div
			id={ p.ID }
			data-calendar-container="true"
			data-locale-tag={ string(p.LocaleTag) }
			data-initial-month={ strconv.Itoa(initialMonth) }
			data-initial-year={ strconv.Itoa(initialYear) }
			data-selected-date={ initialSelectedISO }
			data-with-time={ utils.If(p.WithTime, "true") }
			data-with-seconds={ utils.If(p.WithSeconds, "true") }
			data-with-24hours={ utils.If(p.With24Hours, "true") }
		>
			<!-- Calendar Header -->
			<div class="flex items-center justify-between mb-4">
				<span data-calendar-month-display class="text-sm font-medium"></span>
				<div class="flex gap-1">
					<button
						type="button"
						data-calendar-prev
						class="inline-flex items-center justify-center rounded-md text-sm font-medium h-7 w-7 hover:bg-accent hover:text-accent-foreground focus:outline-none disabled:opacity-50"
					>
						@icon.ChevronLeft()
					</button>
					<button
						type="button"
						data-calendar-next
						class="inline-flex items-center justify-center rounded-md text-sm font-medium h-7 w-7 hover:bg-accent hover:text-accent-foreground focus:outline-none disabled:opacity-50"
					>
						@icon.ChevronRight()
					</button>
				</div>
			</div>
			<!-- Weekday Headers -->
			<div data-calendar-weekdays class="grid grid-cols-7 gap-1 mb-1 place-items-center"></div>
			<!-- Calendar Day Grid -->
			<div data-calendar-days class="grid grid-cols-7 gap-1 place-items-center"></div>
			<!-- Time input row (only if WithTime) -->
			if p.WithTime {
				<div class="flex gap-2 mt-2 items-center justify-center">
					<!-- Hour input -->
					<input
						id={ p.ID + "-hour" }
						type="number"
						min={ utils.IfElse(p.With24Hours, 0, 1) }
						max={ utils.IfElse(p.With24Hours, 23, 12) }
						class={ utils.TwMerge("flex h-9 w-full min-w-0 rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm dark:bg-input/30 selection:bg-primary selection:text-primary-foreground placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive dark:aria-invalid:ring-destructive/40", "w-14 text-center", "bg-background", "border", "px-2", "py-1") }
						value={ utils.IfElse(p.Value != nil && !p.Value.IsZero(), strconv.Itoa(p.Value.Hour()), "12") }
					/>
					<span class="font-bold">:</span>
					<!-- Minute input -->
					<input
						id={ p.ID + "-minute" }
						type="number"
						min="0"
						max="59"
						class={ utils.TwMerge("flex h-9 w-full min-w-0 rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm dark:bg-input/30 selection:bg-primary selection:text-primary-foreground placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive dark:aria-invalid:ring-destructive/40", "w-14 text-center", "bg-background", "border", "px-2", "py-1") }
						value={ utils.IfElse(p.Value != nil && !p.Value.IsZero(), strconv.Itoa(p.Value.Minute()), "0") }
					/>
					<!-- Second input if enabled -->
					if p.WithSeconds {
						<span class="font-bold">:</span>
						<input
							id={ p.ID + "-second" }
							type="number"
							min="0"
							max="59"
							class={ utils.TwMerge("flex h-9 w-full min-w-0 rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm dark:bg-input/30 selection:bg-primary selection:text-primary-foreground placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive dark:aria-invalid:ring-destructive/40", "w-14 text-center", "bg-background", "border", "px-2", "py-1") }
							value={ utils.IfElse(p.Value != nil && !p.Value.IsZero(), strconv.Itoa(p.Value.Second()), "0") }
						/>
					}
					<!-- AM/PM select if 12-hour -->
					if !p.With24Hours {
						<select
							id={ p.ID + "-ampm" }
							class={ utils.TwMerge("flex h-9 w-full min-w-fit rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none md:text-sm dark:bg-input/30 selection:bg-primary selection:text-primary-foreground placeholder:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive dark:aria-invalid:ring-destructive/40", "w-14 text-center", "bg-background", "border", "px-2", "py-1") }
						>
							<option value="AM" selected={ utils.IfElse(p.Value != nil && !p.Value.IsZero(), p.Value.Hour() < 12, true) }>AM</option>
							<option value="PM" selected={ utils.IfElse(p.Value != nil && !p.Value.IsZero(), p.Value.Hour() >= 12, false) }>PM</option>
						</select>
					}
				</div>
			}
		</div>
	</div>
}
