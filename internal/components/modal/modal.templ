package modal

import (
	"github.com/axzilla/templui/internal/utils"
	"strconv"
)

type Props struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	DisableClickAway bool
	DisableESC       bool
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Disabled   bool
	ModalID    string // ID of the modal to trigger
}

type CloseProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	ModalID    string // ID of the modal to close (optional, defaults to closest modal)
}

type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type BodyProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ Modal(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = "modal-" + utils.RandomID() }}
	}
	<dialog
		id={ p.ID }
		data-modal
		data-disable-click-away={ strconv.FormatBool(p.DisableClickAway) }
		data-disable-esc={ strconv.FormatBool(p.DisableESC) }
		class={
			utils.TwMerge(
				"backdrop:bg-background/70 backdrop:opacity-50",
				"bg-background text-foreground rounded-lg border border-border text-left overflow-hidden shadow-xl w-full max-w-md",
				"fixed top-1/2 left-1/2",
				"opacity-0 duration-300 ease-out",
				"m-0 p-0", // Reset dialog default margins/padding
				p.Class,
			),
		}
		style="transition: opacity 300ms ease-out, transform 300ms ease-out;"
		aria-labelledby={ p.ID + "-title" }
		{ p.Attributes... }
	>
		<style>
			dialog[data-modal] {
				transform: translate(-50%, -50%) scale(0.95);
			}
			dialog[data-modal].modal-opening {
				opacity: 1 !important;
				transform: translate(-50%, -50%) scale(1) !important;
			}
			dialog[data-modal].modal-closing {
				opacity: 0 !important;
				transform: translate(-50%, -50%) scale(0.95) !important;
			}
		</style>
		{ children... }
	</dialog>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		data-modal-trigger
		if p.ModalID != "" {
			data-modal-target-id={ p.ModalID }
		}
		class={
			utils.TwMerge(
				utils.IfElse(p.Disabled, "cursor-not-allowed opacity-50", "cursor-pointer"),
				p.Class,
			),
		}
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Close(props ...CloseProps) {
	{{ var p CloseProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		data-modal-close
		if p.ModalID != "" {
			data-modal-target-id={ p.ModalID }
		}
		class={ utils.TwMerge("cursor-pointer", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("px-4 pt-5 pb-4 sm:p-6 sm:pb-4", p.Class) }
		{ p.Attributes... }
	>
		<h3 class="text-lg leading-6 font-medium text-foreground" id={ p.ID + "-title" }>
			{ children... }
		</h3>
	</div>
}

templ Body(props ...BodyProps) {
	{{ var p BodyProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("px-4 pt-5 pb-4 sm:p-6 sm:pb-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}
