package timepicker

import (
	"fmt"
	"github.com/axzilla/templui/internal/components/button"
	"github.com/axzilla/templui/internal/components/icon"
	"github.com/axzilla/templui/internal/components/selectbox"
	"github.com/axzilla/templui/internal/utils"
	"strconv"
	"time"
)

type Props struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Name        string
	Value       time.Time
	Use12Hours  bool
	AMLabel     string
	PMLabel     string
	Placeholder string
	Required    bool
	Disabled    bool
	HasError    bool
}

type SelectOption struct {
	Label string
	Value string
}

templ TimePicker(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	if p.Placeholder == "" {
		{{ p.Placeholder = "Select time" }}
	}
	if p.AMLabel == "" {
		{{ p.AMLabel = "AM" }}
	}
	if p.PMLabel == "" {
		{{ p.PMLabel = "PM" }}
	}
	<div
		class={ utils.TwMerge("relative", p.Class) }
		if p.Value != (time.Time{}) {
			data-value={ p.Value.Format("15:04") }
		}
		data-use12hours={ fmt.Sprintf("%t", p.Use12Hours) }
		x-data="timePicker"
		data-input-id={ p.ID }
	>
		<div class="relative">
			<input
				type="hidden"
				name={ p.Name }
				required?={ p.Required }
			/>
			@button.Button(button.Props{
				ID:      p.ID,
				Type:    "button",
				Variant: button.VariantOutline,
				Class: utils.TwMerge(
					"w-full flex justify-between items-center",
					utils.If(p.HasError, "border-destructive ring-destructive"),
				),
				Disabled: p.Disabled,
				Attributes: utils.MergeAttributes(
					templ.Attributes{
						"@click": "toggleTimePicker",
					},
					p.Attributes,
				),
			}) {
				<span
					class={
						utils.TwMerge(
							"timepicker-display truncate",
							utils.If(p.Value == (time.Time{}), "text-muted-foreground"),
						),
					}
				>
					if p.Value != (time.Time{}) {
						if p.Use12Hours {
							{ p.Value.Format("03:04 PM") }
						} else {
							{ p.Value.Format("15:04") }
						}
					} else {
						{ p.Placeholder }
					}
				</span>
				@icon.Clock(icon.Props{
					Class: "ml-2 h-4 w-4 text-muted-foreground",
				})
			}
		</div>
		<div
			x-show="open"
			x-ref="timePickerPopup"
			@click.away="closeTimePicker"
			x-transition.opacity
			class="absolute left-0 z-50 w-72 p-4 rounded-lg border bg-popover shadow-md"
			:class="positionClass"
			@resize.window="updatePosition"
		>
			<div class="grid grid-cols-2 gap-2 flex-1">
				<div>
					@selectbox.SelectBox(selectbox.Props{
						ID:    "hour-select-" + p.ID,
						Class: "w-full",
					}) {
						@selectbox.Trigger(selectbox.TriggerProps{
							Name: "hour",
						}) {
							@selectbox.Value(selectbox.ValueProps{
								Placeholder: "Hour",
							}) {
								if p.Value != (time.Time{}) {
									if p.Use12Hours {
										// Convert 24h to 12h format for display
										{{ hour := p.Value.Hour() % 12 }}
										{{
										if hour == 0 {
											hour = 12
										}
										}}
										{ fmt.Sprintf("%02d", hour) }
									} else {
										{ fmt.Sprintf("%02d", p.Value.Hour()) }
									}
								}
							}
						}
						@selectbox.Content() {
							@selectbox.Group() {
								for _, option := range hourOptions(p.Use12Hours) {
									@selectbox.Item(selectbox.ItemProps{
										Value: option.Value,
										Selected: p.Value != (time.Time{}) &&
											((p.Use12Hours &&
												((p.Value.Hour()%12 == 0 && option.Value == "12") ||
													(p.Value.Hour()%12 == parseInt(option.Value)))) ||
												(!p.Use12Hours && p.Value.Hour() == parseInt(option.Value))),
									}) {
										{ option.Label }
									}
								}
							}
						}
					}
				</div>
				<div>
					@selectbox.SelectBox(selectbox.Props{
						ID:    "minute-select-" + p.ID,
						Class: "w-full",
					}) {
						@selectbox.Trigger(selectbox.TriggerProps{
							Name: "minute",
						}) {
							@selectbox.Value(selectbox.ValueProps{
								Placeholder: "Minute",
							}) {
								if p.Value != (time.Time{}) {
									{ fmt.Sprintf("%02d", p.Value.Minute()) }
								}
							}
						}
						@selectbox.Content() {
							@selectbox.Group() {
								for _, option := range minuteOptions() {
									@selectbox.Item(selectbox.ItemProps{
										Value:    option.Value,
										Selected: p.Value != (time.Time{}) && p.Value.Minute() == parseInt(option.Value),
									}) {
										{ option.Label }
									}
								}
							}
						}
					}
				</div>
			</div>
			<div class="flex justify-between mt-4 gap-2">
				if p.Use12Hours {
					<div class="flex justify-center gap-2">
						<button
							type="button"
							data-period="AM"
							@click="selectPeriod"
							class={
								utils.TwMerge(
									"px-3 py-1 text-sm rounded-md hover:bg-muted",
									utils.If(p.Value != (time.Time{}) && p.Value.Hour() < 12, "bg-primary text-primary-foreground"),
								),
							}
						>
							{ p.AMLabel }
						</button>
						<button
							type="button"
							data-period="PM"
							@click="selectPeriod"
							class={
								utils.TwMerge(
									"px-3 py-1 text-sm rounded-md hover:bg-muted",
									utils.If(p.Value != (time.Time{}) && p.Value.Hour() >= 12, "bg-primary text-primary-foreground"),
								),
							}
						>
							{ p.PMLabel }
						</button>
					</div>
				} else {
					<div></div>
				}
				@button.Button(button.Props{
					Type:    "button",
					Variant: button.VariantSecondary,
					Attributes: templ.Attributes{
						"@click": "closeTimePicker",
					},
				}) {
					Done
				}
			</div>
		</div>
	</div>
}

func parseInt(str string) int {
	val, err := strconv.Atoi(str)
	if err != nil {
		return 0
	}
	return val
}

func hourOptions(use12Hours bool) []SelectOption {
	options := make([]SelectOption, 0)
	if use12Hours {
		options = append(options, SelectOption{
			Label: "12",
			Value: "12",
		})
		for i := 1; i <= 11; i++ {
			options = append(options, SelectOption{
				Label: fmt.Sprintf("%02d", i),
				Value: fmt.Sprintf("%d", i),
			})
		}
	} else {
		for i := 0; i <= 23; i++ {
			options = append(options, SelectOption{
				Label: fmt.Sprintf("%02d", i),
				Value: fmt.Sprintf("%d", i),
			})
		}
	}
	return options
}

func minuteOptions() []SelectOption {
	options := make([]SelectOption, 60)
	for i := 0; i < 60; i++ {
		options[i] = SelectOption{
			Label: fmt.Sprintf("%02d", i),
			Value: fmt.Sprintf("%d", i),
		}
	}
	return options
}
