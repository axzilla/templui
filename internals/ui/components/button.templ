package components

type ButtonVariant string
type ButtonSize string

const (
	Destructive ButtonVariant = "destructive"
	Outline     ButtonVariant = "outline"
	Secondary   ButtonVariant = "secondary"
	Ghost       ButtonVariant = "ghost"
	Link        ButtonVariant = "link"

	Sm   ButtonSize = "sm"
	Lg   ButtonSize = "lg"
	Icon ButtonSize = "icon"
)

type ButtonProps struct {
	Class string

	Text      string
	Variant   ButtonVariant
	Size      ButtonSize
	Disabled  bool
	FullWidth bool

	HxGet     templ.SafeURL
	HxPost    templ.SafeURL
	HxTrigger string
	HxTarget  string

	XData    string
	XOnClick string
}

func getVariantClasses(variant ButtonVariant) string {
	switch variant {
	case Destructive:
		return "bg-destructive text-destructive-foreground hover:bg-destructive/90"
	case Outline:
		return "border border-input bg-background hover:bg-accent hover:text-accent-foreground"
	case Secondary:
		return "bg-secondary text-secondary-foreground hover:bg-secondary/80"
	case Ghost:
		return "hover:bg-accent hover:text-accent-foreground"
	case Link:
		return "text-primary underline-offset-4 hover:underline"
	default:
		return "bg-primary text-primary-foreground hover:bg-primary/90"
	}
}

func getSizeClasses(size ButtonSize) string {
	switch size {
	case Sm:
		return "h-9 px-3 rounded-md"
	case Lg:
		return "h-11 px-8 rounded-md"
	case Icon:
		return "h-10 w-10"
	default:
		return "h-10 px-4 py-2 rounded-md"
	}
}

templ Button(props ButtonProps, attrs ...templ.Attributes) {
	<button
		class={
			"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors",
			"focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
			"disabled:pointer-events-none disabled:opacity-50",
			getVariantClasses(props.Variant),
			getSizeClasses(props.Size),
			templ.KV("w-full", props.FullWidth),
			props.Class,
		}
		disabled?={ props.Disabled }
		if props.HxGet != "" {
			hx-get={ string(props.HxGet) }
		}
		if props.HxPost != "" {
			hx-post={ string(props.HxPost) }
		}
		if props.HxTrigger != "" {
			hx-trigger={ props.HxTrigger }
		}
		if props.HxTarget != "" {
			hx-target={ props.HxTarget }
		}
		if props.XOnClick != "" {
			@click={ props.XOnClick }
		}
	>
		{ props.Text }
		{ children... }
	</button>
}
